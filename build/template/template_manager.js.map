{
  "version": 3,
  "sources": ["../../src/template/template_manager.ts"],
  "sourcesContent": ["import { SamartHomeHandyBis } from \"../main\";\nimport { Client } from \"../server/client\";\n\nexport class TemplateManager {\n\n    adapter: SamartHomeHandyBis\n    constructor(adapter: SamartHomeHandyBis) {\n        this.adapter = adapter;\n    }\n\n    public async uploadTemplateSetting(name: string, devices: string, screens: string, widgets: string, client: Client) : Promise<void>{\n\t\tif(devices != null) {\n\t\t\tawait this.adapter.setStateAsync(\"settings.\" + name + \".devices\", devices);\n\t\t}\n\t\tif(screens != null) {\n\t\t\tawait this.adapter.setStateAsync(\"settings.\" + name + \".screens\", screens);\n\t\t}\n\t\tif(widgets != null) {\n\t\t\tawait this.adapter.setStateAsync(\"settings.\" + name + \".widgets\", widgets);\n\t\t}\n\t}\n\n\n    public async getTemplateSettings(name: string) : Promise<{screens: any, widgets: any, devices: any} | { [index: string]: never }> {\n\t\tlet temp = (await this.adapter.getStateAsync(\"settings.\" + name + \".devices\"));\n\t\tif(temp == null) {\n\t\t\treturn {};\n\t\t}\n\t\tconst devicesJSON = temp.val ;\n\t\ttemp = (await this.adapter.getStateAsync(\"settings.\" + name + \".screens\"));\n\t\tif(temp == null) {\n\t\t\treturn {};\n\t\t}\n\t\tconst screensJSON = temp.val;\n\t\ttemp = (await this.adapter.getStateAsync(\"settings.\" + name + \".widgets\"));\n\t\tif(temp == null) {\n\t\t\treturn {};\n\t\t}\n\t\tconst widgetsJSON = temp.val;\n\n\t\tthis.adapter.log.debug(\"WIDGETS \" + widgetsJSON);\n\n\t\treturn {\"screens\": screensJSON, \"widgets\": widgetsJSON, \"devices\": devicesJSON};\n\n\t}\n\n\n    public async fetchTemplateSettings() : Promise<string[]> {\n\t\tconst settings = await this.adapter.getAdapterObjectsAsync();\n\t\tthis.adapter.log.debug(\"Fetch Templates\");\n\t\tconst list = [];\n\t\tfor (const id in settings) {\n\t\t\tconst splitted = id.split(\".\");\n\t\t\tif(splitted[2] != \"settings\" || splitted.length > 4)\n\t\t\t\tcontinue;\n\t\t\tthis.adapter.log.debug(\"Settings: \" + id);\n\t\t\tlist.push(splitted[3]);\n\t\t}\n\n\n\t\treturn list;\n\n\t}\n\n\n    public async createNewTemplateSetting(templateSettings: TemplateSettings, client: Client) : Promise<void>{\n\t\tawait this.adapter.setObjectNotExistsAsync(\"settings.\" + templateSettings.name, {\n\t\t\ttype: \"folder\",\n\t\t\tcommon: {\n\t\t\t\tname: templateSettings.name,\n\t\t\t\tread: true,\n\t\t\t\twrite: true\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\n\t\tawait this.adapter.setObjectNotExistsAsync(\"settings.\" + templateSettings.name + \".devices\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: templateSettings.name + \" devices\",\n\t\t\t\ttype: \"string\",\n\t\t\t\trole: \"indicator.json\",\n\t\t\t\tdef: \"{}\",\n\t\t\t\tread: true,\n\t\t\t\twrite: true,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\n\t\tawait this.adapter.setObjectNotExistsAsync(\"settings.\" + templateSettings.name + \".widgets\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: templateSettings.name + \" widgets\",\n\t\t\t\ttype: \"string\",\n\t\t\t\trole: \"indicator.json\",\n\t\t\t\tdef: \"{}\",\n\t\t\t\tread: true,\n\t\t\t\twrite: true,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\n\t\tawait this.adapter.setObjectNotExistsAsync(\"settings.\" + templateSettings.name + \".screens\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: templateSettings.name + \" screens\",\n\t\t\t\ttype: \"string\",\n\t\t\t\trole: \"indicator.json\",\n\t\t\t\tdef: \"{}\",\n\t\t\t\tread: true,\n\t\t\t\twrite: true,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\n\t}\n}\n\nexport class TemplateSettings {\n\tname\n\tconstructor(name: string) {\n\t\tthis.name = name;\n\t}\n\n}"],
  "mappings": "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",
  "names": []
}
