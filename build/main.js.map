{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport {Server} from \"./server/server\";\nimport {Listener} from \"./listener/listener\";\nimport {LoginManager} from \"./login/loginmanager\";\nimport {Client} from \"./server/client\";\nimport {StateChangedDataPack} from \"./server/datapacks\";\nimport {TemplateManager} from \"./template/template_manager\";\nimport {NotificationManager} from \"./notification/notification_manager\";\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\nexport class SamartHomeHandyBis extends utils.Adapter {\n    server?: Server;\n    listener: Listener\n    loginManager: LoginManager\n    port: number = 8095;\n    keyPath: string = \"\";\n    certPath: string = \"\";\n    useCer: boolean = false\n    templateManager: TemplateManager\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"hiob\",\n        });\n\n        this.templateManager = new TemplateManager(this);\n        this.listener = new Listener(this);\n        new NotificationManager(this);\n        this.loginManager = new LoginManager(this);\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"stateChange\", this.listener.onStateChange.bind(this.listener));\n        // this.on(\"objectChange\", this.onObjectChange.bind(this));\n        // this.on(\"message\", this.onMessage.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n        // Reset the connection indicator during startup\n        this.setState(\"info.connection\", true, true);\n\n\n        await this.setObjectNotExistsAsync(\"approveNextLogins\", {\n            type: \"state\",\n            common: {\n                name: \"Connected\",\n                type: \"boolean\",\n                role: \"indicator.approve\",\n                def: false,\n                read: true,\n                write: true,\n            },\n            native: {},\n        });\n        await this.setStateAsync(\"approveNextLogins\", false, true);\n        this.subscribeStates(\"approveNextLogins\");\n        this.loadConfigs();\n        this.initServer();\n    }\n\n    private loadConfigs(): void {\n        this.port = Number(this.config.port)\n        this.certPath = this.config.certPath;\n        this.useCer = this.config.useCert\n        this.keyPath = this.config.keyPath\n\n\n    }\n\n    private initServer(): void {\n        this.server = new Server(this.port, this.keyPath, this.certPath, this, this.useCer);\n        this.server.startServer();\n    }\n\n\n    public async getEnumListJSON(id: string): Promise<{\n        id: string;\n        name: ioBroker.StringOrTranslated;\n        icon: string | undefined;\n        dataPointMembers: {\n            name: any;\n            id: any;\n            role: any;\n            otherDetails: any;\n        }[];\n    }[]> {\n        const list: {\n            id: string;\n            name: ioBroker.StringOrTranslated;\n            icon: string | undefined;\n            dataPointMembers: {\n                name: any;\n                id: any;\n                role: any;\n                otherDetails: any;\n            }[];\n        }[] = [];\n\n\n        const enumDevices = await this.getForeignObjectsAsync(id, \"enum\");\n\n        for (const i in enumDevices) {\n            const members : string[] | undefined = enumDevices[i].common.members;\n            if(!members) {\n                continue;\n            }\n            const dataPoints : any[] = [];\n            if (!dataPoints) {\n                continue\n            }\n            for (const z of members) {\n                const dataPoint = await this.getForeignObjectAsync(z);\n                if (!dataPoint)\n                    continue;\n                dataPoints.push({\n                    \"name\": dataPoint!.common.name,\n                    \"id\": z,\n                    \"role\": dataPoint!.common.role,\n                    \"otherDetails\": dataPoint!.common.custom,\n                });\n            }\n            const map = {\n                \"id\": enumDevices[i]._id,\n                \"name\": enumDevices[i].common.name,\n                \"icon\": enumDevices[i].common.icon,\n                \"dataPointMembers\": dataPoints,\n            };\n            list.push(map);\n        }\n\n\n        return list;\n    }\n\n    public async subscribeToDataPoints(dataPoints: { [x: string]: any; }, client: Client): Promise<void> {\n        this.log.debug(JSON.stringify(dataPoints));\n        for (const i in dataPoints) {\n            //this.log.info(\"sub to11\" + dataPoints[i] );\n            const state = await this.getForeignStateAsync(dataPoints[i]);\n            if (state) {\n                //this.log.info(\"sub to \" + dataPoints[i]);\n                this.subscribeForeignStates(dataPoints[i]);\n                client.sendMSG(new StateChangedDataPack(dataPoints[i], state.val).toJSON(), true);\n            }\n        }\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    // \tif (obj) {\n    // \t\t// The object was changed\n    // \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    // \t} else {\n    // \t\t// The object was deleted\n    // \t\tthis.log.info(`object ${id} deleted`);\n    // \t}\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    // \tif (typeof obj === \"object\" && obj.message) {\n    // \t\tif (obj.command === \"send\") {\n    // \t\t\t// e.g. send email or pushover or whatever\n    // \t\t\tthis.log.info(\"send command\");\n\n    // \t\t\t// Send response in callback if required\n    // \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n    // \t\t}\n    // \t}\n    // }\n\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new SamartHomeHandyBis(options);\n} else {\n    // otherwise start the instance directly\n    (() => new SamartHomeHandyBis())();\n}\n"],
  "mappings": "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",
  "names": []
}
