{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport { Server } from \"./server/server\";\nimport { Listener } from \"./listener/listener\";\nimport { LoginManager } from \"./login/loginmanager\";\nimport { Client } from \"./server/client\";\nimport { StateChangedDataPack } from \"./server/datapacks\";\nimport { TemplateManager } from \"./template/template_manager\";\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\nexport class HiobTs extends utils.Adapter {\n\tserver?: Server;\n\tlistener: Listener\n\tloginManager: LoginManager\n\tport: number = 8095;\n\tkeyPath: string = \"\";\n\tcertPath: string = \"\";\n\tuseCer: boolean = false\n\ttemplateManager: TemplateManager\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: \"hiob-ts\",\n\t\t});\n\t\tthis.templateManager = new TemplateManager(this);\n\t\tthis.listener = new Listener(this);\n\t\tthis.loginManager = new LoginManager(this);\n\t\tthis.on(\"ready\", this.onReady.bind(this));\n\t\tthis.on(\"stateChange\", this.listener.onStateChange.bind(this.listener));\n\t\t// this.on(\"objectChange\", this.onObjectChange.bind(this));\n\t\t// this.on(\"message\", this.onMessage.bind(this));\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\n\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Initialize your adapter here\n\t\t// Reset the connection indicator during startup\n\t\tthis.setState(\"info.connection\", true, true);\n\n\t\t// The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n\t\t// this.config:\n\t\t/*\n\t\tFor every state in the system there has to be also an object of type state\n\t\tHere a simple template for a boolean variable named \"testVariable\"\n\t\tBecause every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n\t\t*/\n\t\t// await this.setObjectNotExistsAsync(\"testVariable\", {\n\t\t// \ttype: \"state\",\n\t\t// \tcommon: {\n\t\t// \t\tname: \"testVariable\",\n\t\t// \t\ttype: \"boolean\",\n\t\t// \t\trole: \"indicator\",\n\t\t// \t\tread: true,\n\t\t// \t\twrite: true,\n\t\t// \t},\n\t\t// \tnative: {},\n\t\t// });\n\n\t\t// In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n\t\t// this.subscribeStates(\"testVariable\");\n\t\t// You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n\t\t// this.subscribeStates(\"lights.*\");\n\t\t// Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n\t\t// this.subscribeStates(\"*\");\n\n\t\t/*\n\t\t\tsetState examples\n\t\t\tyou will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\n\t\t*/\n\t\t// the variable testVariable is set to true as command (ack=false)\n\t\t// await this.setStateAsync(\"testVariable\", true);\n\n\t\t// same thing, but the value is flagged \"ack\"\n\t\t// ack should be always set to true if the value is received from or acknowledged from the target system\n\t\t// await this.setStateAsync(\"testVariable\", { val: true, ack: true });\n\n\t\t// same thing, but the state is deleted after 30s (getState will return null afterwards)\n\t\t// await this.setStateAsync(\"testVariable\", { val: true, ack: true, expire: 30 });\n\n\t\t// examples for the checkPassword/checkGroup functions\n\t\t// let result = await this.checkPasswordAsync(\"admin\", \"iobroker\");\n\t\t// this.log.info(\"check user admin pw iobroker: \" + result);\n\n\t\t// result = await this.checkGroupAsync(\"admin\", \"admin\");\n\t\t// this.log.info(\"check group user admin group admin: \" + result);\n\t\tthis.loadConfigs();\n\t\tthis.initServer();\n\t}\n\n\tprivate loadConfigs(): void {\n\t\tthis.port = Number(this.config.port)\n\t\tthis.certPath = this.config.certPath;\n\t\tthis.useCer = this.config.useCert\n\t\tthis.keyPath = this.config.keyPath\n\n\t}\n\n\tprivate initServer(): void {\n\t\tthis.server = new Server(this.port, this.keyPath, this.certPath, this, this.useCer);\n\t\tthis.server.startServer();\n\t}\n\n\n\tpublic async getEnumListJSON(id: string): Promise<{\n\t\tid: string;\n\t\tname: ioBroker.StringOrTranslated;\n\t\ticon: string | undefined;\n\t\tdataPointMembers: {\n\t\t\tname: any;\n\t\t\tid: any;\n\t\t\trole: any;\n\t\t\totherDetails: any;\n\t\t}[];\n\t}[]> {\n\t\tconst enumDevices = await this.getForeignObjectsAsync(id, \"enum\");\n\t\tconst list = [];\n\t\tfor (const i in enumDevices) {\n\t\t\tconst members = enumDevices[i].common.members;\n\t\t\tconst dataPoints = [];\n\t\t\tfor (const z in members) {\n\t\t\t\tconst dataPoint = await this.getForeignObjectAsync(z);\n\t\t\t\tif (!dataPoint)\n\t\t\t\t\tcontinue;\n\t\t\t\tdataPoints.push({\n\t\t\t\t\t\"name\": dataPoint.common.name,\n\t\t\t\t\t\"id\": z,\n\t\t\t\t\t\"role\": dataPoint.common.role,\n\t\t\t\t\t\"otherDetails\": dataPoint.common.custom,\n\t\t\t\t});\n\t\t\t}\n\t\t\tconst map = {\n\t\t\t\t\"id\": enumDevices[i]._id,\n\t\t\t\t\"name\": enumDevices[i].common.name,\n\t\t\t\t\"icon\": enumDevices[i].common.icon,\n\t\t\t\t\"dataPointMembers\": dataPoints,\n\t\t\t};\n\t\t\tlist.push(map);\n\t\t}\n\t\treturn list;\n\t}\n\n\tpublic async subscribeToDataPoints(dataPoints: { [x: string]: any; }, client: Client) : Promise<void> {\n\t\tthis.log.debug(JSON.stringify(dataPoints));\n\t\tfor(const i in dataPoints) {\n\t\t\t//this.log.info(\"sub to11\" + dataPoints[i] );\n\t\t\tconst state = await this.getForeignStateAsync(dataPoints[i]);\n\t\t\tif(state) {\n\t\t\t\t//this.log.info(\"sub to \" + dataPoints[i]);\n\t\t\t\tthis.subscribeForeignStates(dataPoints[i]);\n\t\t\t\tclient.sendMSG(new StateChangedDataPack(dataPoints[i], state.val).toJSON(), true);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\t// clearTimeout(timeout1);\n\t\t\t// clearTimeout(timeout2);\n\t\t\t// ...\n\t\t\t// clearInterval(interval1);\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n\t// /**\n\t//  * Is called if a subscribed object changes\n\t//  */\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n\t// \tif (obj) {\n\t// \t\t// The object was changed\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n\t// \t} else {\n\t// \t\t// The object was deleted\n\t// \t\tthis.log.info(`object ${id} deleted`);\n\t// \t}\n\t// }\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t// /**\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n\t//  */\n\t// private onMessage(obj: ioBroker.Message): void {\n\t// \tif (typeof obj === \"object\" && obj.message) {\n\t// \t\tif (obj.command === \"send\") {\n\t// \t\t\t// e.g. send email or pushover or whatever\n\t// \t\t\tthis.log.info(\"send command\");\n\n\t// \t\t\t// Send response in callback if required\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n\t// \t\t}\n\t// \t}\n\t// }\n\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new HiobTs(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new HiobTs())();\n}\n"],
  "mappings": "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",
  "names": []
}
