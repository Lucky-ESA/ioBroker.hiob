{
  "version": 3,
  "sources": ["../../src/server/server.ts"],
  "sourcesContent": ["import * as ws from \"ws\";\nimport * as fs from \"fs\";\nimport { createServer } from \"https\";\nimport * as m from \"../main\";\nimport { Client } from \"./client\";\nimport { FirstPingPack } from \"./datapacks\";\nexport class Server {\n    certPath: string;\n    keyPath: string;\n    useCert: boolean;\n    port: number;\n    adapter: m.SamartHomeHandyBis;\n    socket: ws.Server | undefined;\n    stoped: boolean = false;\n    conClients: Client[] = [];\n    constructor(\n        port: number = 4500,\n        keyPath: string = \"key.pem\",\n        certPath: string = \"cert.pem\",\n        adapter: m.SamartHomeHandyBis,\n        useCert: boolean = false,\n    ) {\n        this.port = port;\n        this.certPath = certPath;\n        this.keyPath = keyPath;\n        this.adapter = adapter;\n        this.useCert = useCert;\n    }\n\n    startServer(): void {\n        let server;\n\n        if (this.useCert) {\n            server = createServer({\n                cert: fs.readFileSync(this.certPath),\n                key: fs.readFileSync(this.keyPath),\n            });\n            this.adapter.log.info(\"[Server] Starting secure server...\");\n            this.socket = new ws.Server({ server: server });\n        } else {\n            this.adapter.log.info(\"[Server] Starting server...\");\n            this.socket = new ws.Server({ port: this.port });\n        }\n        this.socket.on(\"error\", (e) => {\n            this.adapter.log.info(\"error: \" + e.message);\n            this.adapter.setState(\"info.connection\", false, true);\n        });\n        this.adapter.setState(\"info.connection\", true, true);\n        this.socket.on(\"connection\", (socket: ws.WebSocket, req) => {\n            this.adapter.log.debug(\"Client connected\");\n            this.conClients.push(new Client(socket, this, req, this.adapter));\n            socket.send(new FirstPingPack().toJSON());\n        });\n        server?.listen(this.port);\n        this.adapter.log.info(\"Server started and is listening on port: \" + this.port);\n        this.stoped = false;\n    }\n\n    broadcastMsg(msg: string): void {\n        //this.webSocketServer.clients.forEach((e) => {});\n        this.conClients\n            .filter((e) => !e.onlySendNotification)\n            .forEach((element) => {\n                if (element.isConnected) element.sendMSG(msg, true);\n            });\n    }\n\n    isConnected(deviceID: string): boolean {\n        return this.conClients.some((c) => c.isConnected && c.id == deviceID);\n    }\n\n    getClient(deviceID: string): Client | undefined {\n        return this.conClients.find((c) => c.isConnected && c.id == deviceID);\n    }\n\n    stop(): void {\n        this.socket?.close();\n        this.adapter.log.info(\"Server stoped\");\n        this.stoped = true;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAoB;AACpB,SAAoB;AACpB,mBAA6B;AAE7B,oBAAuB;AACvB,uBAA8B;AACvB,MAAM,OAAO;AAAA,EAShB,YACI,OAAe,MACf,UAAkB,WAClB,WAAmB,YACnB,SACA,UAAmB,OACrB;AARF,kBAAkB;AAClB,sBAAuB,CAAC;AAQpB,SAAK,OAAO;AACZ,SAAK,WAAW;AAChB,SAAK,UAAU;AACf,SAAK,UAAU;AACf,SAAK,UAAU;AAAA,EACnB;AAAA,EAEA,cAAoB;AAChB,QAAI;AAEJ,QAAI,KAAK,SAAS;AACd,mBAAS,2BAAa;AAAA,QAClB,MAAM,GAAG,aAAa,KAAK,QAAQ;AAAA,QACnC,KAAK,GAAG,aAAa,KAAK,OAAO;AAAA,MACrC,CAAC;AACD,WAAK,QAAQ,IAAI,KAAK,oCAAoC;AAC1D,WAAK,SAAS,IAAI,GAAG,OAAO,EAAE,OAAe,CAAC;AAAA,IAClD,OAAO;AACH,WAAK,QAAQ,IAAI,KAAK,6BAA6B;AACnD,WAAK,SAAS,IAAI,GAAG,OAAO,EAAE,MAAM,KAAK,KAAK,CAAC;AAAA,IACnD;AACA,SAAK,OAAO,GAAG,SAAS,CAAC,MAAM;AAC3B,WAAK,QAAQ,IAAI,KAAK,YAAY,EAAE,OAAO;AAC3C,WAAK,QAAQ,SAAS,mBAAmB,OAAO,IAAI;AAAA,IACxD,CAAC;AACD,SAAK,QAAQ,SAAS,mBAAmB,MAAM,IAAI;AACnD,SAAK,OAAO,GAAG,cAAc,CAAC,QAAsB,QAAQ;AACxD,WAAK,QAAQ,IAAI,MAAM,kBAAkB;AACzC,WAAK,WAAW,KAAK,IAAI,qBAAO,QAAQ,MAAM,KAAK,KAAK,OAAO,CAAC;AAChE,aAAO,KAAK,IAAI,+BAAc,EAAE,OAAO,CAAC;AAAA,IAC5C,CAAC;AACD,qCAAQ,OAAO,KAAK;AACpB,SAAK,QAAQ,IAAI,KAAK,8CAA8C,KAAK,IAAI;AAC7E,SAAK,SAAS;AAAA,EAClB;AAAA,EAEA,aAAa,KAAmB;AAE5B,SAAK,WACA,OAAO,CAAC,MAAM,CAAC,EAAE,oBAAoB,EACrC,QAAQ,CAAC,YAAY;AAClB,UAAI,QAAQ;AAAa,gBAAQ,QAAQ,KAAK,IAAI;AAAA,IACtD,CAAC;AAAA,EACT;AAAA,EAEA,YAAY,UAA2B;AACnC,WAAO,KAAK,WAAW,KAAK,CAAC,MAAM,EAAE,eAAe,EAAE,MAAM,QAAQ;AAAA,EACxE;AAAA,EAEA,UAAU,UAAsC;AAC5C,WAAO,KAAK,WAAW,KAAK,CAAC,MAAM,EAAE,eAAe,EAAE,MAAM,QAAQ;AAAA,EACxE;AAAA,EAEA,OAAa;AA3EjB;AA4EQ,eAAK,WAAL,mBAAa;AACb,SAAK,QAAQ,IAAI,KAAK,eAAe;AACrC,SAAK,SAAS;AAAA,EAClB;AACJ;",
  "names": []
}
